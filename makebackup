#!/bin/bash
#------------------------------------------------------------------------------#
# vi: set sw=4 ts=4 ai:                            ("set modeline" in ~/.exrc) #
#------------------------------------------------------------------------------#
# Program      : makebackup                                                    #
#                                                                              #
# Author       : Ton Kersten                        Groesbeek, The Netherlands #
#                                                                              #
# Date         : 26-03-2008                                       Time : 11:35 #
#                                                                              #
# Description  : Create a backup of all specified directories                  #
#                                                                              #
# Parameters   : None                                                          #
#                                                                              #
# Pre reqs     : Rsync, the backupit tool and Perl                             #
#                                                                              #
# Exit codes   :    0 -> OK                                                    #
#                <> 0 -> !OK                                                   #
#                                                                              #
# Updates      : None (yet)                                                    #
#------------------------------------------------------------------------------#

#------------------------------------------------------------------------------#
#                    V e r s i o n   i n f o r m a t i o n                     #
#------------------------------------------------------------------------------#
# $Id:: makebackup 13 2011-01-25 08:15:05 tonk                              $: #
# $Revision:: 13                                                            $: #
# $Author:: Ton Kersten <tonk@tonkersten.com>                               $: #
# $Date:: 2011-01-25 08:15:05 +0100 (Tue, 25 Jan 2011)                      $: #
# $Hash::                                                                   $: #
#------------------------------------------------------------------------------#
#             E n d   o f   v e r s i o n   i n f o r m a t i o n              #
#------------------------------------------------------------------------------#

#------------------------------------------------------------------------------#
# Determine the program name and the 'running directory'                       #
#------------------------------------------------------------------------------#
IAM="${0##*/}"
CRD="$( [[ "${0:0:2}" = "./" ]] &&
	{	printf "${PWD}/${0#./}"
	} || {
		printf "${0}"
	})"
CRD="${CRD%/*}"
CUR="${PWD}"

#------------------------------------------------------------------------------#
# Save the shell settings                                                      #
#------------------------------------------------------------------------------#
SETA=0; [[ ${-} = *a* ]] && SETA=1
SETE=0; [[ ${-} = *e* ]] && SETE=1
SETU=0; [[ ${-} = *u* ]] && SETU=1
SETX=0; [[ ${-} = *x* ]] && SETX=1

#------------------------------------------------------------------------------#
# Set and unset the needed shell settings                                      #
#------------------------------------------------------------------------------#
set +o noclobber            # Overwrite existing files, if needed              #
set -o nounset              # Don't allow uninitialized variables              #
set +o errexit              # No returncode checking                           #

#------------------------------------------------------------------------------#
# Define the date/time function                                                #
#------------------------------------------------------------------------------#
Now()
{
	date '+%Y-%m-%d %H:%M:%S'

	return 0
}

#------------------------------------------------------------------------------#
# Start the logging                                                            #
#------------------------------------------------------------------------------#
exec > /var/log/${IAM}.log
exec 2>&1

#------------------------------------------------------------------------------#
# Define constants                                                             #
#------------------------------------------------------------------------------#
VER="1.$(awk '/^# \$Revision::/ { print $3 }' ${0})"
CONFIGFILE="${CRD}/${IAM}.conf"
PATH="${PATH}:/bin:/sbin"
PATH="${PATH}:/usr/bin:/usr/sbin"
PATH="${PATH}:/usr/local/bin:/usr/local/sbin"
PATH="${PATH}:${CRD}"
BCK="${CRD}/backupit"
HOSTNAME="$(hostname)"
WD="80"                             # Screen width                             #
s="$(printf "%${WD}s" "")"; s="${s// /-}"			# Single dash line         #
d="$(printf "%${WD}s" "")"; d="${d// /=}"			# Double dash line         #
typeset -i RC=0
typeset -i BCKS=0

#------------------------------------------------------------------------------#
# Announce the start of the program                                            #
#------------------------------------------------------------------------------#
echo "$(Now) -> ${IAM} Starting"
echo
echo "${d}"
echo
echo "     System backup at ${HOSTNAME} ended BACKUPSTATUS"
echo
echo "${d}"
echo

#------------------------------------------------------------------------------#
# Read the config file                                                         #
#------------------------------------------------------------------------------#
CONFIGFILE="${1:-${CRD}/${IAM}.conf}"
if [[ -r "${CONFIGFILE}" ]]
then
	. "${CONFIGFILE}" || {
		echo "Error processing config '${CONFIGFILE}'!" >&2
		exit 1
	}
else
	echo "Could not find config '${CONFIGFILE}'!" >&2
	exit 1
fi

#------------------------------------------------------------------------------#
# Run a command before we begin                                                #
#------------------------------------------------------------------------------#
if [[ x"${PREBACKUP:-}" != x"" ]]
then
	echo "${d}"
	echo "Prebackup command output."
	echo
	eval ${PREBACKUP}
	echo
	echo "${d}"
	echo
fi

#------------------------------------------------------------------------------#
# Backup MySQL if this is requested                                            #
#------------------------------------------------------------------------------#
if [[ x"${BACKUPMYSQL:-yes}" = x"yes" ]]
then
	if [[ -x ${CRD}/mysqlbackup ]]
	then
		echo "$(Now) -> ${IAM} Starting MySQL backup on host '$(hostname)'"
		${CRD}/mysqlbackup
		echo "$(Now) -> ${IAM} Finished MySQL backup on host '$(hostname)'"
	else
		echo "Cannot find MySQL backup tool '${CRD}/mysqlbackup'" >&2
		echo "MySQL backup will be skipped!!" >&2
	fi
fi

#------------------------------------------------------------------------------#
# Check if the 'backupit' program exists. If not, there is no way to backup    #
#------------------------------------------------------------------------------#
if [[ ! -x "${BCK}" ]]
then
	echo "The backup program '${BCK}' cannot be found!" >&2
	echo "There is no way to create a backup." >&2
	echo "The program will be stopped." >&2
	exit 1
fi

#------------------------------------------------------------------------------#
# Create the backups for all defined sources and destinations                  #
#------------------------------------------------------------------------------#
for CNT in $(seq 1 ${BCKS})
do
	echo
	echo "$(Now) -> ${DESC[${CNT}]}"
	echo
	for DST in ${DSTS[${CNT}]}
	do
		[[ ! -d ${DST} ]] &&
		{	mkdir -p ${DST}
			chmod 700 ${DST}
		}

		#----------------------------------------------------------------------#
		# Create the backup source string                                      #
		#----------------------------------------------------------------------#
		SRC=""
		for dir in ${DIRS[${CNT}]}
		do
			SRC="${SRC} --source=${dir}"
		done

		#----------------------------------------------------------------------#
		# Find out the number of cycles to keep                                #
		#----------------------------------------------------------------------#
		CYCLES=${CYCL[${CNT}]:-${MAX}}

		#----------------------------------------------------------------------#
		# Do the backup                                                        #
		#----------------------------------------------------------------------#
		echo "$(Now) -> Starting: ${BCK} --max=${CYCLES} ${SRC} --target=${DST}"
		${BCK} -v --max=${CYCLES} ${SRC} --target=${DST}
		THISRC=${?}
		RC=${RC}+${THISRC}
		echo
		echo
		echo "Return code for this backup cycle: ${THISRC}"
		echo
		echo "Used diskspace in ${DST}/latest"
		echo "-----------------------------------------------------------------"
		echo "	$(du -hs ${DST}/latest/)"
		echo
		echo "Free disk space"
		echo "---------------"
		df -hP "${DST}"
		echo
		echo "${s}"
		echo
	done
	echo
	echo "${d}"
	echo
done

#------------------------------------------------------------------------------#
# Check if it all went well                                                    #
#------------------------------------------------------------------------------#
if [[ ${RC} = 0 ]]
then
	echo "$(Now) -> Backup ended OK!"
	BCKSTATUS="OK! Returncode = 0"
else
	if [[ ${RC} = 24 ]]
	then
		echo "$(Now) -> Backup ended OK!"
		BCKSTATUS="OK! (Some files vanished). Returncode = 24"
	else
		echo "$(Now) -> Backup ended NOT OK! Returncode = ${RC}"
		BCKSTATUS="NOT OK! Returncode = ${RC}"
	fi
fi

#------------------------------------------------------------------------------#
# Run a command after we are done                                              #
#------------------------------------------------------------------------------#
if [[ x"${POSTBACKUP:-}" != x"" ]]
then
	echo "${d}"
	echo "Postbackup command output."
	echo
	eval ${POSTBACKUP}
	echo
	echo "${d}"
	echo
fi

#------------------------------------------------------------------------------#
# Clear the log redirection and insert the program status into the log         #
#------------------------------------------------------------------------------#
exec 1>&-
exec 2>&-
sed -i.bck "s/BACKUPSTATUS/${BCKSTATUS}/" /var/log/${IAM}.log
rm /var/log/${IAM}.log.bck

#------------------------------------------------------------------------------#
# Mail the logging if requested                                                #
#------------------------------------------------------------------------------#
case "${MAILTO}"
in
	stdout)
		#----------------------------------------------------------------------#
		# Send the logging to syslog                                           #
		#----------------------------------------------------------------------#
		cat /var/log/${IAM}.log
		;;

	syslog)
		#----------------------------------------------------------------------#
		# Send the logging to syslog                                           #
		#----------------------------------------------------------------------#
		cat /var/log/${IAM}.log | logger -t "${IAM}" -p local4.info
		;;

	*)
		SUBJ="Logging of '${IAM}' on '${HOSTNAME}' at $(Now)"
		cat /var/log/${IAM}.log | mail -s "${SUBJ}" ${MAILTO}
		;;
esac

#------------------------------------------------------------------------------#
# That's all, folks!                                                           #
#------------------------------------------------------------------------------#
exit ${RC}
